
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.HashMap;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author XPS
 */
public class Dimmer extends javax.swing.JFrame {
    protected InputStream inputStream;
    public static int BAUD;
    protected String response;
    protected CommPortIdentifier selectedPortIdentifier;
    protected SerialPort serialPort;
    public static final int TIMEOUTSECONDS=30;
    protected HashMap map=new HashMap();
    SerialComm serialComm ;
    
    public Dimmer() {
        
        initComponents();
        
        jIncreaseBrightness.setVisible(false);
        jDecreaseBrightness.setVisible(false);
        jVoltageLevel.setVisible(false);
        jOnOff.setVisible(false);
       
        //initVariable(" ", selectedPortIdentifier,9600);
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCommPort = new javax.swing.JLabel();
        jCommPorts = new javax.swing.JComboBox();
        jPopulate = new javax.swing.JButton();
        jLabelBaudRate = new javax.swing.JLabel();
        jBaudRate = new javax.swing.JComboBox();
        jLabelParity = new javax.swing.JLabel();
        jLableNone = new javax.swing.JLabel();
        jConnect = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jIncreaseBrightness = new javax.swing.JButton();
        jDecreaseBrightness = new javax.swing.JButton();
        jReceivedChars = new javax.swing.JLabel();
        jVoltageLevel = new javax.swing.JProgressBar();
        jOnOff = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jLabelCommPort.setText("CommPort : ");

        jCommPorts.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCommPortsPropertyChange(evt);
            }
        });

        jPopulate.setText("Populate");
        jPopulate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPopulateMouseClicked(evt);
            }
        });

        jLabelBaudRate.setText("Baud Rate : ");

        jBaudRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2400", "4800", "9600", "14400" }));
        jBaudRate.setSelectedIndex(2);

        jLabelParity.setText("Parity :");

        jLableNone.setText("None");

        jConnect.setText("Connect");
        jConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jConnectMouseClicked(evt);
            }
        });

        jIncreaseBrightness.setText("Increase Brightness");
        jIncreaseBrightness.setEnabled(false);
        jIncreaseBrightness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jDecreaseBrightness.setText("Decrease Brightness");
        jDecreaseBrightness.setEnabled(false);
        jDecreaseBrightness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jReceivedChars.setToolTipText("");

        jVoltageLevel.setMaximum(4800);

        jOnOff.setText("Off");
        jOnOff.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jOnOffStateChanged(evt);
            }
        });
        jOnOff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jOnOffItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelParity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelBaudRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelCommPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLableNone)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jConnect)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jCommPorts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jBaudRate, 0, 74, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPopulate)
                                .addGap(45, 45, 45))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(jVoltageLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jReceivedChars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jIncreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jDecreaseBrightness, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCommPort)
                    .addComponent(jCommPorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPopulate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBaudRate)
                    .addComponent(jBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelParity)
                    .addComponent(jLableNone))
                .addGap(28, 28, 28)
                .addComponent(jConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jVoltageLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDecreaseBrightness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jIncreaseBrightness, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jReceivedChars, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jOnOff)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPopulateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopulateMouseClicked
        jCommPorts.removeAllItems();
        map.clear();
        populate();
        jConnect.setEnabled(true);
        jBaudRate.setEditable(true);
        jBaudRate.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jPopulateMouseClicked

    @SuppressWarnings("empty-statement")
    private void jCommPortsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCommPortsPropertyChange
        System.out.println(evt.getPropertyName()); 
        System.out.println(evt.getPropertyName().toString().equalsIgnoreCase("enabled"));
        if(evt.getPropertyName().toString().equalsIgnoreCase("enabled"))
        {
            jProgressBar.setString("Comm ports searched");
            jProgressBar.setIndeterminate(false);
            jProgressBar.setValue(100);
            
        }// TODO add your handling code here:
    }//GEN-LAST:event_jCommPortsPropertyChange

    private void jConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jConnectMouseClicked
        selectedPortIdentifier=(CommPortIdentifier)map.get(jCommPorts.getSelectedItem().toString());
        serialComm = new SerialComm(jCommPorts.getName(),selectedPortIdentifier,Integer.parseInt(jBaudRate.getSelectedItem().toString()),jReceivedChars,jVoltageLevel);
        jIncreaseBrightness.setVisible(true);
        jDecreaseBrightness.setVisible(true);
        jIncreaseBrightness.setEnabled(true);
        jDecreaseBrightness.setEnabled(true);
        jVoltageLevel.setVisible(true);
        jVoltageLevel.setEnabled(true);
        jVoltageLevel.setIndeterminate(true);
        jOnOff.setVisible(true);
        jOnOff.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jConnectMouseClicked

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
             char typed;
             typed= evt.getKeyChar();
             switch (typed)
             {
                 case 'i':
                 case 'I':
                     jIncreaseBrightness.doClick();
                     serialComm.write(typed);
                     break;
                 case 'd':
                 case 'D':    
                     jDecreaseBrightness.doClick();
                     serialComm.write(typed);
                     break;
             }
        
            // TODO add your handling code here:
    }//GEN-LAST:event_formKeyTyped

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here
       System.out.println("clicked"); 
    }//GEN-LAST:event_formMouseClicked

    private void jOnOffStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jOnOffStateChanged
    // TODO add your handling code here:
    }//GEN-LAST:event_jOnOffStateChanged

    private void jOnOffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jOnOffItemStateChanged
if(jOnOff.isSelected())
    {
        serialComm.write('o');
        jOnOff.setText("On");
    }
    else
    {
        serialComm.write('f');
        jOnOff.setText("Off");
    }        // TODO add your handling code here:
    }//GEN-LAST:event_jOnOffItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dimmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dimmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dimmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dimmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dimmer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jBaudRate;
    protected javax.swing.JComboBox jCommPorts;
    private javax.swing.JButton jConnect;
    private javax.swing.JButton jDecreaseBrightness;
    private javax.swing.JButton jIncreaseBrightness;
    private javax.swing.JLabel jLabelBaudRate;
    private javax.swing.JLabel jLabelCommPort;
    private javax.swing.JLabel jLabelParity;
    private javax.swing.JLabel jLableNone;
    private javax.swing.JToggleButton jOnOff;
    private javax.swing.JButton jPopulate;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JLabel jReceivedChars;
    private javax.swing.JProgressBar jVoltageLevel;
    // End of variables declaration//GEN-END:variables


     protected void populate()
        {
            jProgressBar.setVisible(true);
            jProgressBar.setValue(0);
            jProgressBar.setIndeterminate(true);
            jProgressBar.setString("Searching");
            jProgressBar.setStringPainted(true);
            
            
            Thread p=new Thread(){
            @Override
                    public void run(){
                        int i=0;
                        Enumeration pList = CommPortIdentifier.getPortIdentifiers();
                        //System.out.println("pList="+pList);
                        while (pList.hasMoreElements())
                        {
                            
                            CommPortIdentifier cpi = (CommPortIdentifier)pList.nextElement();
                            if (cpi.getPortType() == CommPortIdentifier.PORT_SERIAL)
                            {
                                 map.put(cpi.getName(),cpi);
                                 jCommPorts.addItem(cpi.getName());
                                 jProgressBar.setValue(jCommPorts.getItemCount()*10);
                            }
                        }
                        jCommPorts.setEnabled(true);
                        }
                 };
                 p.start();
        }

    
}
