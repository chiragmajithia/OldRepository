package dimmerwithserver;


import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.HashMap;
import javax.swing.text.DefaultCaret;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author XPS
 */
public class DimmerServerGUI extends javax.swing.JFrame {

    
    protected InputStream inputStream;
    public static int BAUD;
    protected String response;
    protected CommPortIdentifier selectedPortIdentifier;
    protected SerialPort serialPort;
    public static final int TIMEOUTSECONDS=30;
    public static int phase_value;
    public static int max_phase_value;
    public static int on_off_state;
    public static boolean client_update;
    protected HashMap map=new HashMap();
    static SerialComm serialComm ;
    
    public DimmerServerGUI() {
        
        initComponents();
        DefaultCaret caret = (DefaultCaret)jServerClientComm.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
       // client_update=true;
        on_off_state = 2;
        max_phase_value=4800;
        phase_value=5000;
        jIncreaseBrightness.setVisible(false);
        jDecreaseBrightness.setVisible(false);
        jVoltageLevel.setVisible(false);
        jOnOff.setVisible(false);
        jServerIP.setVisible(false);
        jIPLabel.setVisible(false);
        jIPLabel.setText("");
        jCreateServer.setEnabled(false);
        jCreateServer.setVisible(false);
        jServerClientComm.setVisible(true);
        jScrollPane1.setVisible(true);
        jServerPanel.setVisible(false);
        jReceivedChars.setVisible(false);
        
        //initVariable(" ", selectedPortIdentifier,9600);
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jServerPanel = new javax.swing.JPanel();
        jCreateServer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jServerClientComm = new javax.swing.JTextArea();
        jIPLabel = new javax.swing.JLabel();
        jServerIP = new javax.swing.JLabel();
        jPortNoLabel = new javax.swing.JLabel();
        jPortNo = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jIncreaseBrightness = new javax.swing.JButton();
        jOnOff = new javax.swing.JToggleButton();
        jDecreaseBrightness = new javax.swing.JButton();
        jReceivedChars = new javax.swing.JLabel();
        jVoltageLevel = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelParity = new javax.swing.JLabel();
        jConnect = new javax.swing.JButton();
        jLabelBaudRate = new javax.swing.JLabel();
        jCommPorts = new javax.swing.JComboBox();
        jLableNone = new javax.swing.JLabel();
        jPopulate = new javax.swing.JButton();
        jBaudRate = new javax.swing.JComboBox();
        jLabelCommPort = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jCreateServer.setText("Create Server");
        jCreateServer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCreateServerMouseClicked(evt);
            }
        });

        jServerClientComm.setEditable(false);
        jServerClientComm.setColumns(20);
        jServerClientComm.setLineWrap(true);
        jServerClientComm.setRows(5);
        jServerClientComm.setWrapStyleWord(true);
        jServerClientComm.setEnabled(false);
        jServerClientComm.setOpaque(false);
        jScrollPane1.setViewportView(jServerClientComm);

        jIPLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jIPLabel.setText("XPS-PC/192.168.0.104:4004");
        jIPLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jServerIP.setText("Sever IP :");

        jPortNoLabel.setText("Port No. :");

        jPortNo.setText("4004");
        jPortNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPortNoFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jServerPanelLayout = new javax.swing.GroupLayout(jServerPanel);
        jServerPanel.setLayout(jServerPanelLayout);
        jServerPanelLayout.setHorizontalGroup(
            jServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jServerPanelLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jServerPanelLayout.createSequentialGroup()
                        .addComponent(jIPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCreateServer))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jServerPanelLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jServerIP)
                .addGap(97, 97, 97)
                .addComponent(jPortNoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jServerPanelLayout.setVerticalGroup(
            jServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jServerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jServerIP)
                    .addComponent(jPortNoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jServerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jIPLabel)
                    .addComponent(jCreateServer)
                    .addComponent(jPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jIncreaseBrightness.setText("Increase Brightness");
        jIncreaseBrightness.setEnabled(false);
        jIncreaseBrightness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jOnOff.setText("Off");
        jOnOff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jOnOffItemStateChanged(evt);
            }
        });

        jDecreaseBrightness.setText("Decrease Brightness");
        jDecreaseBrightness.setEnabled(false);
        jDecreaseBrightness.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jReceivedChars.setBackground(new java.awt.Color(255, 255, 255));
        jReceivedChars.setToolTipText("");
        jReceivedChars.setOpaque(true);

        jVoltageLevel.setMaximum(4800);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jVoltageLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jIncreaseBrightness)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDecreaseBrightness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jReceivedChars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jVoltageLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDecreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jIncreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jReceivedChars, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabelParity.setText("Parity :");

        jConnect.setText("Connect");
        jConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jConnectMouseClicked(evt);
            }
        });

        jLabelBaudRate.setText("Baud Rate : ");

        jCommPorts.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCommPortsPropertyChange(evt);
            }
        });

        jLableNone.setText("None");

        jPopulate.setText("Populate");
        jPopulate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPopulateMouseClicked(evt);
            }
        });

        jBaudRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2400", "4800", "9600", "14400" }));
        jBaudRate.setSelectedIndex(2);

        jLabelCommPort.setText("CommPort : ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelParity, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelBaudRate, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                .addComponent(jLabelCommPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCommPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLableNone)
                            .addComponent(jBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jConnect)
                            .addComponent(jPopulate))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCommPort)
                            .addComponent(jCommPorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelBaudRate))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLableNone)
                            .addComponent(jLabelParity))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPopulate)
                        .addGap(46, 46, 46)
                        .addComponent(jConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jServerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jServerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPopulateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopulateMouseClicked
        jCommPorts.removeAllItems();
        map.clear();
        populate();
        jConnect.setEnabled(true);
        jBaudRate.setEditable(true);
        jBaudRate.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jPopulateMouseClicked

    private void jCommPortsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCommPortsPropertyChange
       // System.out.println(evt.getPropertyName()); 
       // System.out.println(evt.getPropertyName().toString().equalsIgnoreCase("enabled"));
        if(evt.getPropertyName().toString().equalsIgnoreCase("enabled"))
        {
            jProgressBar.setString("Comm ports searched");
            jProgressBar.setIndeterminate(false);
            jProgressBar.setValue(100);
            
        }// TODO add your handling code here:
    }//GEN-LAST:event_jCommPortsPropertyChange

    private void jConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jConnectMouseClicked
        selectedPortIdentifier=(CommPortIdentifier)map.get(jCommPorts.getSelectedItem().toString());
        
        serialComm = new SerialComm(jCommPorts.getName(),selectedPortIdentifier,Integer.parseInt(jBaudRate.getSelectedItem().toString()),jReceivedChars,jVoltageLevel);
        jIncreaseBrightness.setVisible(true);
        jDecreaseBrightness.setVisible(true);
        jIncreaseBrightness.setEnabled(true);
        jDecreaseBrightness.setEnabled(true);
        jVoltageLevel.setVisible(true);
        jVoltageLevel.setEnabled(true);
        jVoltageLevel.setIndeterminate(true);
        jOnOff.setVisible(true);
        jOnOff.setEnabled(true);
        jServerIP.setVisible(true);
        jIPLabel.setVisible(true);
        jIPLabel.setText(DimmerServer.getInetAddress());
        jReceivedChars.setVisible(true);
        jServerPanel.setVisible(true);
        jCreateServer.setVisible(true);
        jConnect.setEnabled(false);
        if(!DimmerServer.getInetAddress().equalsIgnoreCase("Server Error"))
            jCreateServer.setEnabled(true);
       
        // TODO add your handling code here:
    }//GEN-LAST:event_jConnectMouseClicked

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
             char typed;
             typed= evt.getKeyChar();
             switch (typed)
             {
                 case 'i':
                 case 'I':
                     jIncreaseBrightness.doClick();
                     serialComm.write(typed);
                     //client_update = true;
                     DimmerServer.notifyClients("Brightness Increased\n");
                     DimmerServer.notifyClients(StatusReport());
                     break;
                 case 'd':
                 case 'D':    
                     jDecreaseBrightness.doClick();
                     serialComm.write(typed);
                      DimmerServer.notifyClients("Brightness Decreased\n");
                      DimmerServer.notifyClients(StatusReport());
                     break;
             }
        
            // TODO add your handling code here:
    }//GEN-LAST:event_formKeyTyped

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here
       //System.out.println("clicked"); 
    }//GEN-LAST:event_formMouseClicked

    private void jOnOffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jOnOffItemStateChanged
        if(jOnOff.isSelected())
            {
                serialComm.write('o');
                jOnOff.setText("On");
                on_off_state = 1;
            }
            else
            {
                serialComm.write('f');
                jOnOff.setText("Off");
                on_off_state =0 ;
            }        // TODO add your handling code here:
       // client_update=true;
        DimmerServer.notifyClients("Switch On/Off State Changed\n");
        DimmerServer.notifyClients(StatusReport());
    }//GEN-LAST:event_jOnOffItemStateChanged

    private void jCreateServerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCreateServerMouseClicked
      int port =Integer.parseInt(jPortNo.getText());
       jScrollPane1.setVisible(true);
       jServerPanel.setVisible(true);
      
      try
      {
         Thread t = new DimmerServer(port);
         t.start();
      }catch(IOException e)
      {
      }        // TODO add your handling code here:
     
      //jServerClientComm.setVisible(true);
      
    }//GEN-LAST:event_jCreateServerMouseClicked

    private void jPortNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPortNoFocusGained
 jPortNo.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_jPortNoFocusGained
    
    protected void populate()
        {
            jProgressBar.setVisible(true);
            jProgressBar.setValue(0);
            jProgressBar.setIndeterminate(true);
            jProgressBar.setString("Searching");
            jProgressBar.setStringPainted(true);
            
            
            Thread p=new Thread(){
            @Override
                    public void run(){
                        int i=0;
                        Enumeration pList = CommPortIdentifier.getPortIdentifiers();
                        //System.out.println("pList="+pList);
                        while (pList.hasMoreElements())
                        {
                            
                            CommPortIdentifier cpi = (CommPortIdentifier)pList.nextElement();
                            if (cpi.getPortType() == CommPortIdentifier.PORT_SERIAL)
                            {
                                 map.put(cpi.getName(),cpi);
                                 jCommPorts.addItem(cpi.getName());
                                 jProgressBar.setValue(jCommPorts.getItemCount()*10);
                            }
                        }
                        jCommPorts.setEnabled(true);
                        }
                 };
                 p.start();
        }
    
    static void getStatusReport(double id) 
    {
        DimmerServer.notifyClient(StatusReport(), id);
        jServerClientComm.append("status_report  Requested by client= "+ id);
    }
    public static String StatusReport()
    {
        String s;
        //s=[OnOffStatus,DelayValue,MaxDelayValue]
        s="Status Report = [";
        s+= Boolean.toString(jOnOff.isSelected());
        s+=",";
        s+=Integer.toString(phase_value);
        s=s+",";
        s=s+Integer.toString(jVoltageLevel.getMaximum());
        s=s+"]\n";
        return s;
    }
    
    public static void Control(String msg)
    {
        if(msg.equals("o"))
        {
            jOnOff.setSelected(true);
        }
        if(msg.equals("f"))
        {
            jOnOff.setSelected(false);
        }
        if(msg.equals("d"))
        {
            serialComm.write('d');
            DimmerServer.notifyClients("Brightness Decreased\n");
            DimmerServer.notifyClients(StatusReport());
        }
        if(msg.equals("D"))
        {
            serialComm.write('D');
            DimmerServer.notifyClients("Brightness Decreased\n");
            DimmerServer.notifyClients(StatusReport());
        }
        if(msg.equals("i"))
        {
            serialComm.write('i');
            DimmerServer.notifyClients("Brightness Increased\n");
            DimmerServer.notifyClients(StatusReport());
        }
        if(msg.equals("I"))
        {
            serialComm.write('I');
            DimmerServer.notifyClients("Brightness Increased\n");
            DimmerServer.notifyClients(StatusReport());
        }
       if(msg.contains("Dim%="))
       {
           serialComm.write('p');
           String temp=msg;
           temp = temp.substring(5);
          // System.out.println(temp);
           int dim= Integer.parseInt(temp);
           char c =(char)dim;
          // System.out.println(c);
           serialComm.write(c);
           DimmerServer.notifyClients("Phase Angle changed");
           DimmerServer.notifyClients(StatusReport());
       }
        
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DimmerServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DimmerServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DimmerServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DimmerServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DimmerServerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jBaudRate;
    protected javax.swing.JComboBox jCommPorts;
    private javax.swing.JButton jConnect;
    private javax.swing.JButton jCreateServer;
    public static javax.swing.JButton jDecreaseBrightness;
    public static javax.swing.JLabel jIPLabel;
    public static javax.swing.JButton jIncreaseBrightness;
    private javax.swing.JLabel jLabelBaudRate;
    private javax.swing.JLabel jLabelCommPort;
    private javax.swing.JLabel jLabelParity;
    private javax.swing.JLabel jLableNone;
    public static javax.swing.JToggleButton jOnOff;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jPopulate;
    private javax.swing.JTextField jPortNo;
    private javax.swing.JLabel jPortNoLabel;
    private javax.swing.JProgressBar jProgressBar;
    public static javax.swing.JLabel jReceivedChars;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jServerClientComm;
    private javax.swing.JLabel jServerIP;
    private javax.swing.JPanel jServerPanel;
    public static javax.swing.JProgressBar jVoltageLevel;
    // End of variables declaration//GEN-END:variables


 

    
}
