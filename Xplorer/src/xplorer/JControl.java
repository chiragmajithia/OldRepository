/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JConnect.java
 *
 * Created on Mar 18, 2012, 8:33:14 PM
 */
package xplorer;

import gnu.io.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Chirag
 */
public class JControl extends javax.swing.JFrame implements SerialPortEventListener{

    boolean ready;
    int i;
    protected InputStream inputStream;
    public static final int TIMEOUTSECONDS=30;
    public static int BAUD;
    protected String response;
    protected CommPortIdentifier selectedPortIdentifier;
    protected SerialPort serialPort;

    /** Creates new form JConnect */
    public JControl(String name ,CommPortIdentifier sPI,int baud) {
        ready = true;
        i=0;
        initComponents();
        selectedPortIdentifier = sPI;
        BAUD =baud;
        this.setName(name);
        try
        {
            serialPort=(SerialPort) selectedPortIdentifier.open(name + "open", TIMEOUTSECONDS * 1000);
            System.out.println("serialPort.getName() = "+ serialPort.getName());
        }
        catch (PortInUseException ex)
        {
            Logger.getLogger(JControl.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
	    inputStream = serialPort.getInputStream();
	}
        catch (IOException e) {}

	try
        {
	    serialPort.addEventListener(this);
	}
        catch (TooManyListenersException e) {}

	//serialPort.notifyOnDataAvailable(true);
        serialPort.notifyOnDataAvailable(true);

	try
        {
            serialPort.setSerialPortParams(BAUD, SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
	}
        catch (UnsupportedCommOperationException e) {}

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonU = new javax.swing.JButton();
        jButtonL = new javax.swing.JButton();
        jButtonD = new javax.swing.JButton();
        jButtonR = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(xplorer.XplorerApp.class).getContext().getResourceMap(JControl.class);
        jButtonU.setIcon(resourceMap.getIcon("jUp.icon")); // NOI18N
        jButtonU.setText(resourceMap.getString("jUp.text")); // NOI18N
        jButtonU.setName("jUp"); // NOI18N
        jButtonU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonKeyTyped(evt);
            }
        });

        jButtonL.setIcon(resourceMap.getIcon("jButtonL.icon")); // NOI18N
        jButtonL.setText(resourceMap.getString("jButtonL.text")); // NOI18N
        jButtonL.setName("jButtonL"); // NOI18N
        jButtonL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonKeyTyped(evt);
            }
        });

        jButtonD.setIcon(resourceMap.getIcon("jButtonD.icon")); // NOI18N
        jButtonD.setText(resourceMap.getString("jButtonD.text")); // NOI18N
        jButtonD.setName("jButtonD"); // NOI18N
        jButtonD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonKeyTyped(evt);
            }
        });

        jButtonR.setIcon(resourceMap.getIcon("jButtonR.icon")); // NOI18N
        jButtonR.setText(resourceMap.getString("jButtonR.text")); // NOI18N
        jButtonR.setName("jButtonR"); // NOI18N
        jButtonR.setName("jButtonR"); // NOI18N
        jButtonR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButtonKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButtonL, javax.swing.GroupLayout.PREFERRED_SIZE, 84, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonD, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonR, javax.swing.GroupLayout.PREFERRED_SIZE, 85, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButtonU, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonL, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonD, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonR, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(332, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyTyped

    private void jButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonKeyTyped
        // TODO add your handling code here:

        
        char k = evt.getKeyChar();
        int sleep = 10;
        if (ready) {
            ready=false;
            i++;
            switch (k) {
                case 'A':
                case 'a':
                    System.out.println("A");
                    jButtonR.doClick(sleep);
                    break;
                case 's':
                case 'S':
                    System.out.println("S");
                    jButtonD.doClick(sleep);
                    break;
                case 'd':
                case 'D':
                    System.out.println("L");
                    jButtonL.doClick(sleep);
                    break;
                case 'w':
                case 'W':
                    System.out.println("W");
                    jButtonU.doClick(sleep);
                    break;
            }
            jButtonU.doClick(100);
            System.out.println("Button Clicked "+i+ready);
            //ready = true;
        }
    }//GEN-LAST:event_jButtonKeyTyped

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonD;
    private javax.swing.JButton jButtonL;
    private javax.swing.JButton jButtonR;
    private javax.swing.JButton jButtonU;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public void serialEvent(SerialPortEvent event) {
        SerialPort p= (SerialPort) event.getSource();
        System.out.println("event.getSource().toString();=" + p.getName());
        
        switch (event.getEventType())
        {
	case SerialPortEvent.BI:
	case SerialPortEvent.OE:
	case SerialPortEvent.FE:
	case SerialPortEvent.PE:
	case SerialPortEvent.CD:
	case SerialPortEvent.CTS:
	case SerialPortEvent.DSR:
	case SerialPortEvent.RI:
	case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
        break;
	case SerialPortEvent.DATA_AVAILABLE:
        byte[] readBuffer = new byte[1];
        try
        {
                while (inputStream.available() > 0)
                {
	        int numBytes = inputStream.read(readBuffer);
                String in=new String(readBuffer);
                int z=(char)in.charAt(0);
                z=(readBuffer[0] & 0xff);
                System.out.println("z= "+z);
                ready=true;
                }
        }
        catch (IOException e)
        {
            System.out.println("error");
        }
	break;
	}

    }

}
